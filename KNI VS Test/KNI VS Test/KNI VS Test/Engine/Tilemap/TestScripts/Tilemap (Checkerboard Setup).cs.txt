// Generate the checkerboard tilemap in the LoadContent() method.
//for (int i = 0; i < width; i++) {
//	for (int j = 0; j < height; j++) {
//		tiles[i, j] = new Tile(this, new Point(i, j), 			  
//			new Rectangle[] {(i + j) % 2 == 0 ? new Rectangle (tileSize * 1, 0, tileSize, tileSize) : new Rectangle (tileSize * 2, 0, tileSizetileSize),
//			new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, 0, 0), new Rectangle(0, 0, 0, 0)}, false);
//		Console.WriteLine(tiles[i,j].ToString());
//	}
//}

//BinarySerializer.WriteTilemap("test.tmap", this);

-------------------------------------------------------------------------------------------
OBSOLTE CODE BELOW
-------------------------------------------------------------------------------------------



// Insert as part of this method in the tilemap.cs file to recreate the test generation.
	private void LoadContent(ContentManager contentManager, string tilemapName)
	{
		tiles = new Tile[10000];

		// THIS IS A TEST SETUP. The real tilemap data will be loaded from XML datasheets once I implement that.
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				if ((i * 100) + j > 10000) break;
				tiles[(i * 100) + j] = new Tile(this, new Point(i, j), new string[] {((i * 10) + j) % 2 == 0 ? "WhiteCheckTile" : "BlackCheckTile", null, null, null}, false);
			}
		}

		tilemapData = new TilemapData();

		TileData[] tileData = new TileData[tiles.Length];

		for (int i = 0; i < tileData.Length; i++) {
			if (tiles[i] == null) break;
			TileData data = new TileData();
			data.tilemapPosition = tiles[i].tilemapPosition;
			data.layerTextureNames = tiles[i].layerTextureNames;
			data.blockMovement = false;

			tileData[i] = data;
		}

		tilemapData.tilemapData = tileData;

		PipelineSerialize.XmlSerialize(tilemapData, "CheckerBoardTestTiles.xml");
	}

// UPDATED
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				tiles[i, j] = new Tile(this, new Point(i, j), 
					new String[] {(i + j) % 2 == 0 ? "WhiteCheckTile" : "BlackCheckTile", null, null, null}, false);
				Console.WriteLine(tiles[i,j].ToString());
			}
		}

		tilemapData = new TilemapData();
		tilemapData.tilemapData = new TileData[width * height];

		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				TileData data = new TileData();
				data.tilemapPosition = tiles[i,j].tilemapPosition;
				data.layerTextureNames = tiles[i,j].layerTextureNames;
				data.blockMovement = false;
				tilemapData.tilemapData[(i * 100) + j] = data;	
			}			
		}

		PipelineSerialize.XmlSerialize(tilemapData, "nestedTestTiles.xml");